{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IChainlinkAggregator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\n// Full interface for Chainlink Aggregator\ninterface IChainlinkAggregator {\n  function decimals() external view returns (uint8);\n\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  function description() external view returns (string memory);\n}\n"
    },
    "contracts/USDOXChainlinkPriceAggregator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport './interfaces/IChainlinkAggregator.sol';\n\ncontract USDOXChainlinkPriceAggregator is IChainlinkAggregator {\n  int256 public USDOX_USD_PRICE = 100000000; // $1.00 USD with 8 decimals\n  uint256 public currentRoundId = 1;\n\n  // Stores the price for each round ID\n  mapping(uint256 => int256) private roundAnswers;\n\n  // Stores the timestamp for each round ID\n  mapping(uint256 => uint256) private roundTimestamps;\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\n\n  /**\n   * @notice Returns the number of decimals for the price feed.\n   * @dev Chainlink price feeds typically use 8 decimals.\n   */\n  function decimals() external view override returns (uint8) {\n    return 8;\n  }\n\n  function aggregator() external view returns (address) {\n    return address(this);\n  }\n\n  function description() external view override returns (string memory) {\n    return 'USDOX / USD';\n  }\n\n  /**\n   * @notice Returns the latest USDOX/USD price with 8 decimals.\n   * The price is fixed at $1.00 USD per USDOX by default.\n   */\n  function latestAnswer() external view override returns (int256) {\n    return USDOX_USD_PRICE;\n  }\n\n  /**\n   * @notice Returns the latest timestamp when the price was updated.\n   */\n  function latestTimestamp() external view override returns (uint256) {\n    return roundTimestamps[currentRoundId];\n  }\n\n  /**\n   * @notice Returns the latest round ID.\n   */\n  function latestRound() external view override returns (uint256) {\n    return currentRoundId;\n  }\n\n  /**\n   * @notice Returns the price for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getAnswer(uint256 roundId) external view override returns (int256) {\n    return roundAnswers[roundId];\n  }\n\n  /**\n   * @notice Returns the timestamp for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getTimestamp(uint256 roundId) external view override returns (uint256) {\n    return roundTimestamps[roundId];\n  }\n\n  /**\n   * @notice Sets a new USDOX/USD price for testing purposes.\n   * @dev This function should only be available in test environments.\n   * @param newPrice The new price to set.\n   */\n  function setPrice(int256 newPrice) external {\n    USDOX_USD_PRICE = newPrice;\n    emit AnswerUpdated(newPrice, currentRoundId, block.timestamp);\n    _startNewRound(newPrice);\n  }\n\n  /**\n   * @notice Internal function to start a new round.\n   * Emits the `NewRound` event.\n   * @param newPrice The price to associate with the new round.\n   */\n  function _startNewRound(int256 newPrice) internal {\n    currentRoundId++;\n    roundAnswers[currentRoundId] = newPrice;\n    roundTimestamps[currentRoundId] = block.timestamp;\n\n    emit NewRound(currentRoundId, msg.sender);\n  }\n}\n"
    },
    "contracts/WSTZBUChainlinkPriceAggregator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport './interfaces/IChainlinkAggregator.sol';\n\ncontract WSTZBUChainlinkPriceAggregator is IChainlinkAggregator {\n  int256 public WSTZBU_USD_PRICE = 518000000; // $5.18 USD with 8 decimals\n  uint256 public currentRoundId = 1;\n\n  // Stores the price for each round ID\n  mapping(uint256 => int256) private roundAnswers;\n\n  // Stores the timestamp for each round ID\n  mapping(uint256 => uint256) private roundTimestamps;\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\n\n  /**\n   * @notice Returns the number of decimals for the price feed.\n   * @dev Chainlink price feeds typically use 8 decimals.\n   */\n  function decimals() external view override returns (uint8) {\n    return 8;\n  }\n\n  function aggregator() external view returns (address) {\n    return address(this);\n  }\n\n  function description() external view override returns (string memory) {\n    return 'WSTZBU / USD';\n  }\n\n  /**\n   * @notice Returns the latest WSTZBU/USD price with 8 decimals.\n   * The price is fixed at $1.00 USD per WSTZBU by default.\n   */\n  function latestAnswer() external view override returns (int256) {\n    return WSTZBU_USD_PRICE;\n  }\n\n  /**\n   * @notice Returns the latest timestamp when the price was updated.\n   */\n  function latestTimestamp() external view override returns (uint256) {\n    return roundTimestamps[currentRoundId];\n  }\n\n  /**\n   * @notice Returns the latest round ID.\n   */\n  function latestRound() external view override returns (uint256) {\n    return currentRoundId;\n  }\n\n  /**\n   * @notice Returns the price for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getAnswer(uint256 roundId) external view override returns (int256) {\n    return roundAnswers[roundId];\n  }\n\n  /**\n   * @notice Returns the timestamp for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getTimestamp(uint256 roundId) external view override returns (uint256) {\n    return roundTimestamps[roundId];\n  }\n\n  /**\n   * @notice Sets a new WSTZBU/USD price for testing purposes.\n   * @dev This function should only be available in test environments.\n   * @param newPrice The new price to set.\n   */\n  function setPrice(int256 newPrice) external {\n    WSTZBU_USD_PRICE = newPrice;\n    emit AnswerUpdated(newPrice, currentRoundId, block.timestamp);\n    _startNewRound(newPrice);\n  }\n\n  /**\n   * @notice Internal function to start a new round.\n   * Emits the `NewRound` event.\n   * @param newPrice The price to associate with the new round.\n   */\n  function _startNewRound(int256 newPrice) internal {\n    currentRoundId++;\n    roundAnswers[currentRoundId] = newPrice;\n    roundTimestamps[currentRoundId] = block.timestamp;\n\n    emit NewRound(currentRoundId, msg.sender);\n  }\n}\n"
    },
    "contracts/ZBUChainlinkPriceAggregator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport './interfaces/IChainlinkAggregator.sol';\n\ncontract ZBUChainlinkPriceAggregator is IChainlinkAggregator {\n  int256 public ZBU_USD_PRICE = 518000000; // $5.18 USD with 8 decimals\n  uint256 public currentRoundId = 1;\n\n  // Stores the price for each round ID\n  mapping(uint256 => int256) private roundAnswers;\n\n  // Stores the timestamp for each round ID\n  mapping(uint256 => uint256) private roundTimestamps;\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\n\n  /**\n   * @notice Returns the number of decimals for the price feed.\n   * @dev Chainlink price feeds typically use 8 decimals.\n   */\n  function decimals() external view override returns (uint8) {\n    return 8;\n  }\n\n  function aggregator() external view returns (address) {\n    return address(this);\n  }\n\n  function description() external view override returns (string memory) {\n    return 'ZBU / USD';\n  }\n\n  /**\n   * @notice Returns the latest ZBU/USD price with 8 decimals.\n   * The price is fixed at $2.00 USD per ZBU by default.\n   */\n  function latestAnswer() external view override returns (int256) {\n    return ZBU_USD_PRICE;\n  }\n\n  /**\n   * @notice Returns the latest timestamp when the price was updated.\n   */\n  function latestTimestamp() external view override returns (uint256) {\n    return roundTimestamps[currentRoundId];\n  }\n\n  /**\n   * @notice Returns the latest round ID.\n   */\n  function latestRound() external view override returns (uint256) {\n    return currentRoundId;\n  }\n\n  /**\n   * @notice Returns the price for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getAnswer(uint256 roundId) external view override returns (int256) {\n    return roundAnswers[roundId];\n  }\n\n  /**\n   * @notice Returns the timestamp for a specific round.\n   * @param roundId The round ID to query.\n   */\n  function getTimestamp(uint256 roundId) external view override returns (uint256) {\n    return roundTimestamps[roundId];\n  }\n\n  /**\n   * @notice Sets a new ZBU/USD price for testing purposes.\n   * @dev This function should only be available in test environments.\n   * @param newPrice The new price to set.\n   */\n  function setPrice(int256 newPrice) external {\n    ZBU_USD_PRICE = newPrice;\n    emit AnswerUpdated(newPrice, currentRoundId, block.timestamp);\n    _startNewRound(newPrice);\n  }\n\n  /**\n   * @notice Internal function to start a new round.\n   * Emits the `NewRound` event.\n   * @param newPrice The price to associate with the new round.\n   */\n  function _startNewRound(int256 newPrice) internal {\n    currentRoundId++;\n    roundAnswers[currentRoundId] = newPrice;\n    roundTimestamps[currentRoundId] = block.timestamp;\n\n    emit NewRound(currentRoundId, msg.sender);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}